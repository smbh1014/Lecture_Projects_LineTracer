#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include <stdio.h>

#define MOTOR_PORT      PORTD
#define MOTOR_PORT_DDR   DDRD

#define SENSOR_PORT      PINC
#define STOP_DELAY 10
#define DIR_DELAY 38
#define TURN 300

volatile int bb_flag=0;
volatile int stop_flag=0;
volatile int bb2ww_flag=0;
volatile int stop = 0;
volatile int left_flag = 0;
volatile int right_flag = 0;
volatile int temp1 = 0;
volatile int temp2 = 0;
void port_init(void)
{
 PORTA = 0x00;
 DDRA  = 0x00;
 PORTB = 0x00;
 DDRB  = 0x00;
 PORTC = 0x00;
 DDRC  = 0x00;
 PORTD = 0x00;
 DDRD  = 0xFF;
 PORTE = 0x00;
 DDRE  = 0x0E;
 PORTF = 0x00;
 DDRF  = 0xFF;
 PORTG = 0x00;
 DDRG  = 0x03;
}

void init_devices(void)
{
  cli(); //disable all interrupts
 XDIV  = 0x00; //xtal divider
 XMCRA = 0x00; //external memory
 port_init();

 MCUCR = 0x00;
 EICRA = 0x00; //extended ext ints
 EICRB = 0x0B; //extended ext ints
 EIMSK = 0x30;
 TIMSK = 0x41; //timer interrupt sources
 ETIMSK = 0x30; //extended timer interrupt sources
 EIFR  = 0x00;
 TCCR0 = 0x07;
 TCNT0 = 0x00;
 TCCR2 = 0x05;
 TCNT2 = 0x00;
 sei(); //re-enable interrupts
 //all peripherals are now initialized

}


/* Stepping Motor derive---------------------------*/
unsigned char  LEFTmotorOneClock(unsigned char step, char dir)
{   
   step = step & 0x0f;
   if(dir){
      switch(step){
         case 0x09: step=0x01; break;
         case 0x01: step=0x03; break;
         case 0x03: step=0x02; break;
         case 0x02: step=0x06; break;
         case 0x06: step=0x04; break;
         case 0x04: step=0x0c; break;
         case 0x0c: step=0x08; break;
         case 0x08: step=0x09; break;
         default: step=0x0c; break;
      }
   }else{
      switch(step){
         case 0x09: step=0x08; break;
         case 0x01: step=0x09; break;
         case 0x03: step=0x01; break;
         case 0x02: step=0x03; break;
         case 0x06: step=0x02; break;
         case 0x04: step=0x06; break;
         case 0x0c: step=0x04; break;
         case 0x08: step=0x0c; break;
         default: step=0x0c; break;
      }
   }
   return step;

}


/* Stepping Motor derive---------------------------*/
unsigned char  RIGHTmotorOneClock(unsigned char step, char dir)
{   
   step = step & 0xf0;
   if(dir){
      switch(step){
         case 0x90: step=0x10; break;
         case 0x10: step=0x30; break;
         case 0x30: step=0x20; break;
         case 0x20: step=0x60; break;
         case 0x60: step=0x40; break;
         case 0x40: step=0xc0; break;
         case 0xc0: step=0x80; break;
         case 0x80: step=0x90; break;
         default: step=0xc0; break;
      }
   }else{
      switch(step){
         case 0x90: step=0x80; break;
         case 0x10: step=0x90; break;
         case 0x30: step=0x10; break;
         case 0x20: step=0x30; break;
         case 0x60: step=0x20; break;
         case 0x40: step=0x60; break;
         case 0xc0: step=0x40; break;
         case 0x80: step=0xc0; break;
         default: step=0xc0; break;
      }
   }
   return step;
}

unsigned char  LEFTmotorOneClock1(unsigned char step, char dir)
{   
   step = step & 0x0f;
   if(dir){
      switch(step){
         case 0x09: step=0x03; break;
         case 0x03: step=0x06; break;
         case 0x06: step=0x0c; break;
         case 0x0c: step=0x09; break;
         default: step=0x0c; break;
      }
   }else{
      switch(step){
         case 0x09: step=0x0c; break;
         case 0x03: step=0x09; break;
         case 0x06: step=0x03; break;
         case 0x0c: step=0x06; break;
         default: step=0x0c; break;
      }
   }
   return step;

}

unsigned char  RIGHTmotorOneClock1(unsigned char step, char dir)
{   
   step = step & 0xf0;
   if(dir){
      switch(step){
         case 0x90: step=0x30; break;
         case 0x30: step=0x60; break;
         case 0x60: step=0xc0; break;
         case 0xc0: step=0x90; break;
         default: step=0xc0; break;
      }
   }else{
      switch(step){
         case 0x90: step=0xc0; break;
         case 0x30: step=0x90; break;
         case 0x60: step=0x30; break;
         case 0xc0: step=0x60; break;
         default: step=0xc0; break;
      }
   }
   return step;
}


void delay(int n)
{
   volatile int i,j;
   for(i=1;i<n;i++)
   {
       for(j=1;j<400;j++);
   }
}


int main(void)
{

 unsigned char sensor;
 volatile unsigned char stepleft=0, stepright=0;a
 
 init_devices();
    
 MOTOR_PORT_DDR = 0xff;
 
 while(1) {
  if((~PING)&0x04) {
     while(!stop){
         sensor = SENSOR_PORT & 0x0F;

      switch(sensor){ //2 bits
         case 0x0a: //0b1010, 0b0110
         case 0x08: //0b1000, 0b0100
         case 0x02: //0b0010
                  bb_flag=1;
                  temp1 = 0; 
                  if((sensor & 0x0a) == 0x02) {
                     stepleft = LEFTmotorOneClock(stepleft, 0);
                      delay(5);
                  }
                  else if((sensor & 0x0a) == 0x08) {
                     stepright = RIGHTmotorOneClock(stepright, 1);
                      delay(5);
                  }
                  else {
                     stepright = RIGHTmotorOneClock1(stepright, 1);
                      stepleft = LEFTmotorOneClock1(stepleft, 0);
                     right_flag = 1;
                     left_flag = 1;
                     delay(5);
                  }
                  break;
         case 0x0f:  //0b1111
                  if(bb_flag==1) {
                     bb2ww_flag=1;
                     bb_flag=0;
                  }
                  stepright = RIGHTmotorOneClock1(stepright, 1);
                   stepleft = LEFTmotorOneClock1(stepleft, 0);
                  delay(5);
                  break;
         case 0x06: //move to right, 0b1010, 0110
         case 0x07: //move to right, 0b1011, 0111
                  //if((sensor&0x01)==0x00) {
                   //  left_flag = 1;
                  //} 
                  stepleft = LEFTmotorOneClock1(stepleft, 0);
                   delay(5);
                  break;
         case 0x09: //move to left, 0b1001, 0b0101
         case 0x0d:  //move to left, 0b1101
                  //if((sensor&0x08)==0x00) {
                   //  right_flag = 1;
                   // }
                    stepright = RIGHTmotorOneClock1(stepright, 1);
                   delay(5);
                   break;
         case 0x0e: //0b1110   ->sensor 0111
         case 0x0b: //0b1011, 0b0111
                  if(bb_flag==1) {
                     bb2ww_flag=1;
                     bb_flag=0;
                  }
                  if((sensor&0x01)==0x00) {   //0111
                     left_flag = 1;
                  }
                  else if((sensor&0x04)==0x00) {   //1110
                     right_flag = 1;
                  }
                  stepright = RIGHTmotorOneClock1(stepright, 1);
                   stepleft = LEFTmotorOneClock1(stepleft, 0);
                  delay(5);
                  break;              
               
         case 0x00: //cross point
                  if(left_flag == right_flag) {
                     stepright = RIGHTmotorOneClock1(stepright, 1);
                      stepleft = LEFTmotorOneClock1(stepleft, 0);
                     delay(5);
                     left_flag=0;
                     right_flag=0;
                  }
                  else if(left_flag==1) {
                     for(int i = 0; i < TURN; i++) {
                         stepright = RIGHTmotorOneClock(stepright, 1);
                         stepleft = LEFTmotorOneClock(stepleft, 1);
                         delay(5);
                        MOTOR_PORT = stepleft|stepright;
                     }
                     left_flag=0;
                     right_flag=0;
                     stepright = RIGHTmotorOneClock1(stepright, 1);
                      delay(5);
                  }         
                  else if(right_flag==1) {
                     for(int i = 0; i < TURN; i++) {
                        stepleft = LEFTmotorOneClock(stepleft, 0);
                  stepright = RIGHTmotorOneClock(stepright, 0);
                         delay(5);
                        MOTOR_PORT = stepleft|stepright;
                     }
                     left_flag=0;
                     right_flag=0;
                     stepleft = LEFTmotorOneClock1(stepleft, 0);
                     delay(5);
                     
                  }
                  else {
                     stepright = RIGHTmotorOneClock1(stepright, 1);
                      stepleft = LEFTmotorOneClock1(stepleft, 0);
                     delay(5);
                     left_flag = 0;
                     right_flag = 0;
                  }
                  
                  break;
         default:    
                  stepright = RIGHTmotorOneClock(stepright, 1);
                  stepleft = LEFTmotorOneClock(stepleft, 0);
                  delay(5);
                  break;
      }      
      MOTOR_PORT = stepleft|stepright;
 }
  }
 }
 return 0;
}

ISR(TIMER0_OVF_vect) {
   temp1++;
   if(bb2ww_flag==1) {
      stop_flag+=bb2ww_flag;
      bb2ww_flag=0;
      delay(5);
   }
   
   if(stop_flag>=3) {
      stop = 1;
      PORTF=0x10;
   }

   if(temp1>=STOP_DELAY) {
      bb_flag=0;
      stop_flag=0;
      bb2ww_flag=0;
      temp1 = 0;
      EIFR=0x00;
   }
}

ISR(TIMER2_OVF_vect) {
   temp2++;
   if((left_flag&&right_flag)==1) {
      PORTF=0xf0;
   }
   else if(left_flag==1) {
      PORTF=0x10;
   }
   else if(right_flag==1) {
      PORTF=0x80;
   }
   else {
      PORTF=0x00;
   }
   if(temp2 >= DIR_DELAY) {
      left_flag = 0;
      right_flag = 0;
      temp2 = 0;
   }

}   